"""jd2chm.py 0.3 - Converts Javadoc into Microsoft(TM) HTML Help Projects file

Usage:
jd2chm.py [-h | | -c | -l | -p project_name -t doc_title]
-h              : displays usage
-c              : checks if the HHC compiler is installed
-l              : displays license
-p project_name : builds a CHM project_name
-t doc_title    : assigns doc_title as title of the documentation

Copyright 2000-2004 by Andre Burgaud <andre@burgaud.com>
"""

__version__ = "0.3"

# $RCSfile: jd2chm.py,v $
# $Revision: 1.2 $

#===============================================================================
# IMPORTS
#===============================================================================
import sys
import re
import os
import string
import getopt
import shutil
import time
import tempfile
import urllib
import win32api
import win32con
import pywintypes
from stat import *

#===============================================================================
# GLOBAL VARIABLES
#===============================================================================

# Logger
levels = ("DEBUG", "INFO", "WARNING", "ERROR", "FATAL")
LEVEL_FATAL = 4
LEVEL_ERROR = 3
LEVEL_WARN = 2
LEVEL_INFO = 1
LEVEL_DEBUG = 0

# Set to one of the values above to increase or reduce log information
#LEVEL_LOG = LEVEL_DEBUG
LEVEL_LOG = LEVEL_INFO

# Set to 1 uses a custom CSS
CUSTOM_CSS = 1

# jdoc2chm version
VERSION = "0.3"

# Temporary working directory
WORKING_DIR = "jd2chm"

# Jd2chm Config file
#CONFIG_FILE = "jd2chm.cfg"

HTML_HELP_WSHOP_KEY = "Software\\Microsoft\\HTML Help Workshop"

MIT_LICENSE = """Copyright (c) 2002-2004 Andre Burgaud (http://www.burgaud.com)

Permission  is hereby granted, free of charge, to any person obtaining
a copy  of  this  software  and  associated documentation  files  (the
"Software"), to  deal  in  the Software without restriction, including
without limitation the  rights to use,  copy, modify,  merge, publish,
distribute,  sublicense, and/or  sell copies of the Software,  and  to
permit persons to whom the Software  is furnished to do so, subject to
the following conditions:

The  above  copyright  notice  and  this permission  notice  shall  be
included in all copies or substantial portions of the Software.

THE SOFTWARE  IS  PROVIDED  "AS  IS",  WITHOUT WARRANTY  OF ANY  KIND,
EXPRESS OR IMPLIED, INCLUDING  BUT  NOT LIMITED TO  THE  WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT  HOLDERS BE LIABLE FOR  ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER  IN AN  ACTION OF CONTRACT,
TORT  OR OTHERWISE, ARISING  FROM, OUT  OF OR  IN CONNECTION WITH  THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."""

#===============================================================================
# Javadoc files
css_file_name = "stylesheet.css"
jdk_book_file = "overview-frame.html"
overview_tree = "overview-tree.html"
PACKAGE_TREE_HTML = "package-tree.html"
package_summary = "package-summary.html"
package_use = "package-use.html"
index_html = "index.html"
index_dir = "index-files"    # Either a directory with splitted index files
index_all = "index-all.html" # or one unique index file
ABOUT_FILE = "about.html"    # About file generated by jd2chm

#===============================================================================
# Messages
MSG_THANKS = """
===========================================================
                 Thanks for using jd2chm
Visit the site http://www.burgaud.com to check new versions
Any  comments or remarks may be sent to <andre@burgaud.com>
===========================================================
"""

MSG_WELCOME = """
jd2chm Version %s
Copyright (c) 2000-2004 Andre Burgaud
http://www.burgaud.com
"""

#===============================================================================
# Formats
format_project = """[OPTIONS]
Compatibility=1.1 or later
Binary TOC=Yes
Binary Index=Yes
Compiled file=%s.chm
Contents file=%s.hhc
Index file=%s.hhk
Default Window=main
Default topic=%s
Error log file=hhc.log
Display compile progress=Yes
Display compile notes=No
Full-text search=Yes
Language=0x409 English (United States)
Title=%s

[WINDOWS]
main="%s","%s.hhc","%s.hhk","%s","%s","about.html","About Jd2chm...",,,0x73520,,0x74387e,,,,,,,,0

[FILES]
"""

format_toc_header="""<HTML>
<HEAD>
  <!-- HTML Help Contents File -->
  <!-- Generated: %s with jd2chm.py -->
  <!-- http://www.burgaud.com -->
</HEAD>
<BODY>
<OBJECT type="text/site properties">
  <param name="FrameName" value="main">
</OBJECT>
<P>
"""

format_allclasses_content_item = """<LI><OBJECT type="text/sitemap">
  <param name="Name" value="All Classes">
  <param name="Local" value="%s">
</OBJECT>
<UL>
"""

format_index_header = """<HTML>
<HEAD>
  <!-- HTML Help Index File -->
  <!-- Generated: %s with jd2chm.py -->
  <!-- http://www.burgaud.com -->
</HEAD>
<BODY>
"""

# Represents the index keyword. Sub-entries (next format)
# pointing to the proper class or interface
format_index_keyword = """<LI><OBJECT type="text/sitemap">
<param name="Name" value="%s">
<param name="See Also" value="%s">
</OBJECT>
"""

format_index_item = """<LI><OBJECT type="text/sitemap">
  <param name="Local" value="%s">
  <param name="Name" value="%s">
</OBJECT>
"""

format_content_book_item = """<LI><OBJECT type="text/sitemap">
  <param name="Name" value="%s">
  <param name="Local" value="%s">
</OBJECT>
"""

format_content_class_item = """<LI><OBJECT type="text/sitemap">
  <param name="Local" value="%s">
  <param name="Name" value="%s">
</OBJECT>
"""

format_content_method_item = """<LI><OBJECT type="text/sitemap">
  <param name="Name" value="%s">
  <param name="Local" value="%s">
</OBJECT>
"""

format_css = """/* The original CSS file has been saved under stylesheet.css.bak */
body { background-color: #FFFFFF; font-size: 10pt; font-family: Helvetica, Arial, sans-serif }
td { background-color: #FFFFFF; font-size: 10pt; font-family: Helvetica, Arial, sans-serif }
/* Table colors */
.TableHeadingColor     { background: #CCCCFF } /* Dark mauve */
.TableSubHeadingColor  { background: #EEEEFF } /* Light mauve */
.TableRowColor         { background: #FFFFFF } /* White */
/* Font used in left-hand frame lists */
.FrameTitleFont   { font-size: 10pt; font-family: Helvetica, Arial, sans-serif}
.FrameHeadingFont { font-size: 10pt; font-family: Helvetica, Arial, sans-serif }
.FrameItemFont    { font-size: 10pt; font-family: Helvetica, Arial, sans-serif }
/* Links */
a:link { color: #0000FF; text-decoration: underligne;}
a:visited { color: #A9A9A9 ; text-decoration: underligne;}
a:active { color: #FF0000; text-decoration: underligne;}
a:hover { color: #FF0000; text-decoration: underligne;}
/* Navigation bar fonts and colors */
.NavBarCell1    { background-color:#EEEEFF;} /* Light mauve */
.NavBarCell1Rev { background-color:#00008B;} /* Dark Blue */
.NavBarFont1    { font-family: Helvetica, Arial, sans-serif; color:#000000;}
.NavBarFont1Rev { font-family: Helvetica, Arial, sans-serif; color:#FFFFFF;}
.NavBarCell2    { font-family: Helvetica, Arial, sans-serif; background-color:#FFFFFF;}
.NavBarCell3    { font-family: Helvetica, Arial, sans-serif; background-color:#FFFFFF;}
"""

ABOUT_TEXT = """
<HTML><HEAD><TITLE>About Jd2chm</TITLE></HEAD>
<BODY><CENTER>
<TABLE width="50%" border="2" cellspacing="0" cellpadding="0">
<TR><TD height="50%" bgcolor="#C0C0C0" bordercolorlight="#000000" bordercolordark="#FFFFFF">
<TABLE width="100%" border="0" cellspacing="0" cellpadding="0">
<TR><TD bgcolor="#000080"><FONT face="Microsoft Sans Serif" size="2" color="#FFFFFF">
<B>&nbsp;&nbsp; About Jd2chm...</B>
</FONT></TD></TR>
<TR><TD><CENTER><BR>
<FONT face="Microsoft Sans Serif" size="2">
The project files of this HTML Help<BR>Were generated with Jd2chm version 0.3<BR>
Copyright &copy; 2000-2003 <A href="mailto:andre@burgaud.com">Andre Burgaud</A><BR>
<A href="http://www.burgaud.com/">http://www.burgaud.com</A></FONT><BR>&nbsp;
<CENTER></TD></TR>
</TABLE>
</TD></TR></TABLE></CENTER></BODY></HTML>
"""

#===============================================================================
# CLASSES
#===============================================================================
class CHhp:

  """Creates the HTML Help Project file (HHP file)
  """

  def __init__(self, project_name, project_title, default_file) :
    self.project_name = project_name
    self.project_title = project_title
    self.default_file = default_file

  def create_hhp(self) :
    hhp_file_name = self.project_name + ".hhp"
    self.hhp_file = openfile_w(hhp_file_name)

    # Create the project file: .HHP
    self.hhp_file.write(format_project % (self.project_name,  # chm name
                                          self.project_name,  # hhc name (contents)
                                          self.project_name,  # hhk name (index)
                                          self.default_file,  # default topic
                                          self.project_title, # project title
                                          self.project_title, # main wnd title
                                          self.project_name,  # hhc for wnd
                                          self.project_name,  # hhk for wnd
                                          self.default_file,  # default topic for wnd
                                          self.default_file)) # home topic for wnd

    self.create_file_section()
    self.hhp_file.close()

  def create_file_section(self):
    """Parses the directory tree to collect the HTML files"""
    walktree(".", self.write_file_section)
    print # Carriage return after the dots...

  def write_file_section(self, html_file_path):
    """Writes only if '.html' files.
    Doesn't write the './' at the begining of the path"""
    if html_file_path[string.rfind(html_file_path, '.'):] == '.html' :
      self.hhp_file.write(html_file_path[2:] + '\n')

class CHhc:

  """Creates the contents file (HHC file)
  """

  def __init__(self, project_name, content_file, default_file) :
    self.cpt = 0
    self.hhc_file_name = project_name + ".hhc"
    self.content_file = content_file
    self.default_file = default_file
    # Regex to extract href and title for a book topic
    self.re_anchor_book = re.compile(r'<A HREF="([^"]*)".*>(.*)</A>')
    # Regex to extract href, type (interface or class), title for a page topic
    # The attribute 'title' is new in Java 1.4 but for backward compatibility
    # is not used in the regexp
    #self.re_anchor_page = re.compile(r'^<A\s+HREF="([^"]*)"\s+title="(\w+)\s+.*">(?:<I>)?([^<]*)(?:</I>)?</A>')
    self.re_anchor_page = re.compile(r'^<A\s+HREF="([^"]*)"[^>]*>(?:<I>)?([^<]*)(</I>)?</A>')
    # Regex to extract the url from the prefix "../"
    self.re_href = re.compile(r'(../)*(.*)')
    # Regex to extract inner class from class html file
    #self.re_inner = re.compile(r'<TD>.*<A\s+HREF="([^"]*)"\s+title="(\w+)\s+.*">([^<]*)</A></B></CODE>')
    self.re_inner = re.compile(r'<TD>.*<A\s+HREF="([^"]*)"[^>]*>([^<]*)</A></B></CODE>')
    # Regex to extract methods from class html file
    self.re_method = re.compile(r'<TD><CODE><B><A\s+HREF="([^"]*)">([^<]*)</A></B>(\([^)]*\))?</CODE>')
    # Regex to extract the type and the variable of an 'anchored' argument
    self.re_args = re.compile(r'<A\s+HREF=[^>]*>([^<]*)</A>(.*;.*)')

  def create_hhc(self) :
    self.hhc_file = openfile_w(self.hhc_file_name)
    str_time = time.strftime("%B-%d-%Y", time.localtime(time.time()))
    self.hhc_file.write(format_toc_header % str_time)
    self.hhc_file.write('<UL>\n')
    title = "About Jd2chm..."
    self.hhc_file.write(format_content_class_item % ("about.html", title))
    if os.path.exists(self.default_file):
      title = "Overview"
      self.hhc_file.write(format_content_class_item % (self.default_file, title))
    if os.path.exists(overview_tree):
      title = "Hierarchy For All Packages"
      self.hhc_file.write(format_content_class_item % (overview_tree, title))
    if (self.content_file == jdk_book_file):
      # Content file is "overview-frame.html"
      self.create_packages(self.content_file)
    else :
      # Content file is "allclasses-frame.html"
      self.hhc_file.write(format_allclasses_content_item % self.default_file)
      html_class = "allclasses-frame.html"
      if os.path.exists(html_class):
        self.hhc_file.write('<UL>\n')
        self.create_classes('', html_class, "All Classes")
        self.hhc_file.write('</UL>\n')
    self.hhc_file.write('</UL>\n</BODY>\n</HTML>\n')
    self.hhc_file.close()

  def create_packages(self, html_file):
    """Parses overview-frame.html file"""
    debug(html_file)
    fd = open(html_file, 'r')
    lines = fd.readlines()
    fd.close()
    #href = None
    title = None
    html_class = ''
    html_package = ''
    for line in lines:
      res = self.re_anchor_book.search(line)
      if res:
        #href = res.group(1)
        title = res.group(2)
        if (title  != "All Classes") :
          # The book is associated with the package info (package-summary)
          path = string.replace (title, '.', '/')
          html_package = "%s/package-summary.html" % path
          html_class = "%s/package-frame.html" % path
        else:
          # All Class: associated with default file
          # Processes the allclass file only if there is no "overview-frame.html"
          # Application with no package
          if (self.content_file != jdk_book_file):
            html_package = self.default_file
            path = '' # Current path
            html_class = "allclasses-frame.html" # file that will be parsed to generate content topics
        if os.path.exists(html_class):
          self.hhc_file.write(format_content_book_item % (title, html_package))
          self.hhc_file.write('<UL>\n')
          self.create_classes(path, html_class, title)
          self.hhc_file.write('</UL>\n')

  def create_inners(self, html_class):
    fd = open(html_class, 'r')
    data = fd.read()
    fd.close()
    href = None
    title = None
    #type = None
    iteration = re.finditer(self.re_inner, data)
    if iteration:
      for match in iteration:
        href = match.group(1)
        title = match.group(2)
        try:
          (clazz, inner) = string.split(title, '.')
        except ValueError:
          # This is a method (not an inner class or interface)
          continue
        title = inner # Keeps only the inner class name. Will be shown as a child of the class
        res = self.re_href.search(href) # removes the prefix ../..
        if res:
          href = res.group(2)
        self.hhc_file.write(format_content_class_item % (href, title))
        if (os.path.exists(href)) :
          # We do not build the method level for the All Class book
          self.hhc_file.write('<UL>\n')
          self.create_methods(href)
          self.hhc_file.write('</UL>\n')

  def create_classes(self, path, html_file, package_name):
    """Parses package-frame.html file"""
    package_tree_path = os.path.join(path, PACKAGE_TREE_HTML)
    if os.path.exists(package_tree_path):
      title = "Hierarchy For Package %s" % package_name
      self.hhc_file.write(format_content_class_item % (package_tree_path, title))
    package_use_path = os.path.join(path, package_use)
    if os.path.exists(package_use_path):
      title = "Uses of Package %s" % package_name
      self.hhc_file.write(format_content_class_item % (package_use_path, title))
    fd = open(html_file, 'r')
    lines = fd.readlines()
    fd.close()
    href = None
    title = None
    #type = None
    for line in lines:
      self.cpt = print_dot(self.cpt)
      res = self.re_anchor_page.match(line)
      if res:
        href = res.group(1) # url
        if href.find(package_summary) > 0:
          # The package summary url is caught by the class regexp, skip
          continue
        title = res.group(2) # title
        interface = res.group(3) # interface or class
        res = self.re_href.search(href) # removes the prefix ../..
        if res:
          href = res.group(2)
          if path:
            href = "%s/%s" % (path, href)
        if interface:
          title = "%s (Interface)" % (title)
        # Inner class: Class.Inner
        # Inner class handled in the class. Skipped if public static, and
        # therefore visible in the package-frame file
        if (string.find(title, '.') == -1):
          self.hhc_file.write(format_content_class_item % (href, title))
          if (os.path.exists(href)) :
            # We do not build the method level for the All Class book
            self.hhc_file.write('<UL>\n')
            self.create_inners(href)
            self.create_methods(href)
            self.hhc_file.write('</UL>\n')

  def create_methods(self, html_file):
    fd = open(html_file, 'r')
    data = fd.read()
    fd.close()
    iteration = re.finditer(self.re_method, data)
    arg = None
    for match in iteration:
      href = match.group(1)
      name = match.group(2)
      if name.find('.') > 0:
        # This is an inner class of interface, skip
        continue
      res = self.re_href.search(href) # removes the prefix ../..
      if res:
        href = res.group(2)
      arg = match.group(3)
      if arg: # This is a method
        # Remove parenthesis
        arg = arg[1:-1]
        # Split to process multiple parameter
        args = string.split(arg, ',')
        new_args = []
        for arg in args:
          # Remove leading and trailing whitespace(s)
          new_arg = string.strip(arg)
          # Process possible anchor
          res = re.search(self.re_args, new_arg)
          if res:
            new_arg = "%s%s" % (res.group(1), res.group(2))
          # Add to the clean list of parameter
          new_args.append(new_arg)
        args = ''
        if len(new_args) == 1:
          args = new_args[0]
        else:
          args = string.join(new_args, ', ')
        name = "%s (%s)" % (name, args)
        arg = None
      self.hhc_file.write(format_content_method_item % (name, href))

class CHhk :

  """Creates the index file (format file_name.hhk)

  Parses all the file in the index-file directory or the unique index file
  in the main dir.
  Write an object bloc that includes href, title and class information.

  """

  def __init__(self, project_name) :
    self.hhk_file_name = project_name + ".hhk"
    # Regexp to extract the href and title
    self.re_index = re.compile(r'<DT><A HREF="([^"]*)"\s*[^>]*><B>([^<]*)</B></A>')
    # Regexp to extract the Java class name
    self.re_class = re.compile(r'(.*).html')
    # Regexp to eleminate the "../.." prefix
    self.re_href = re.compile(r'(../)*(.*)')
    self.cpt = 0

  def create_hhk(self) :
    self.hhk_file = openfile_w(self.hhk_file_name)
    str_time = time.strftime("%B-%d-%Y", time.localtime(time.time()))
    self.hhk_file.write(format_index_header % str_time)
    self.hhk_file.write('<UL>\n')
    self.create_index()
    print # Add a CR after the dots
    self.hhk_file.write('</UL>\n</BODY>\n</HTML>\n')
    self.hhk_file.close()

  def create_index(self) :
    if os.path.exists(index_all) :
      # Javadoc generated with one unique index file in the main dir
      self.parse_re_idxfile(index_all)
    else :
      # Javadoc generated with splitted index files in the index dir
      for index_file in os.listdir(index_dir) :
        index_file = index_dir + '/' + index_file
        self.parse_re_idxfile(index_file)

  def parse_re_idxfile(self, index_file):
    fd = open(index_file, 'r')
    data = fd.read()
    fd.close()
    iteration = re.finditer(self.re_index, data)
    self.kword = ''
    self.entries = []
    for match in iteration:
      self.cpt = print_dot(self.cpt)
      href = match.group(1)
      res_href = self.re_href.search(href)  # Removes the (../)* preceding the url
      if res_href:
        href = res_href.group(2)
      title = match.group(2)
      res_class = self.re_class.match(href)
      java_class = ''
      if res_class:
        java_class = res_class.group(1)
        java_class = string.replace(java_class, '/', '.') # sustitute / separator by .
      self.write_index(href, title, java_class)
    if self.kword:
      self.write_index()

  def write_index(self, href="", title="", java_class=""):
    if self.kword and self.kword != title:
      if len(self.entries) == 1:
        # only one item, no need for subentries in the index
        self.hhk_file.write(format_index_item % (self.entries[0][0], self.kword))
      else:
        # Multiple entries so subindex for the same kword
        self.hhk_file.write(format_index_keyword % (self.kword, self.kword))
        self.hhk_file.write('<UL>\n')
        for entry in self.entries:
          # entry[0] is href, entry[1] is java_class
          self.hhk_file.write(format_index_item % (entry[0], "in " + entry[1]))
        self.hhk_file.write('</UL>\n')
      self.kword = title
      self.entries = []
    else:
      if not self.kword:
        self.kword = title
    self.entries.append((href, java_class))

class CChmProject:

  """Main class"""

  def __init__(self):
    self.content_file=''
    self.default_file=''

  def parse_re_index_html(self):
    """Parses index.html file to retrieve the files to be parsed in order to create
    the contents table and to set the default page

    JavaDoc with multiple packages:
    Takes the attribute src in the 1st tag <FRAME>, "overview-frame.html" and in
    the 3rd tag <FRAME>, "overview-summary.html"

    JavaDoc with one package:
    Takes the attribute src in the 1st tag <FRAME>, "allclasses-frame.html" and
    in the 2nd tag <FRAME>, example: "com/sun/javadoc/package-summary.html"
    """
    index_file = open(index_html, 'r')
    lines = index_file.readlines()
    index_file.close()
    self.re_src = re.compile(r'^<FRAME src="([^"]*)"')
    for line in lines:
      res = self.re_src.match(line)
      if res:
        if not self.content_file:
          self.content_file = res.group(1)
        else:
          self.default_file = res.group(1)

  def create_project(self, project_name, project_title) :
    self.parse_re_index_html()
    debug('Content file:', self.content_file)
    debug('Default file:', self.default_file)
    hhp = CHhp(project_name, project_title, self.default_file)
    info("Creating HTML Help Project")
    hhp.create_hhp()
    # Create hhc file (contents)
    # The default file is passed to be used in case of a single package
    hhc = CHhc(project_name, self.content_file, self.default_file)
    info("Creating HTML Help Contents")
    hhc.create_hhc()
    # Create hhk file (index)
    hhk = CHhk(project_name)
    print # Add a CR after the dots
    info("Creating HTML Help Index")
    hhk.create_hhk()

class ChmEnv:

  """Creates a temporary environment to build and compile the project

  Copies all the source file into the temporary directory. Generates the common
  files (CSS, About). Cleans-up the HTML files: especially, the white-spaces in
  some URL's (method with more than one parameter).

  """
  def __init__(self):
    pass

  def prepare_env(self, project_name):
    self.project_name = project_name
    self.start_dir = os.getcwd()
    # If HH Compiler not installed, it prompts
    # the user and stops
    self.html_compiler = self.get_html_compiler_path()

    # Check if a project with the same name is already open
    chm_file = os.path.join(self.start_dir, '%s.chm' % project_name)
    if os.path.exists(chm_file):
      while 1:
        try:
          os.unlink(chm_file)
          break
        except OSError:
          print "The file %s is open" % chm_file
          print "Close the corresponding Window and type any key"
          raw_input()

    # Copy full javadoc files into working directory
    self.temp_dir = self.copy_javadoc()
    # Working directory becomes current dir
    os.chdir(self.temp_dir)
    # Modifiy files (URL clean-up)
    self.re_method = re.compile(r'<TD><CODE><B><A\s+HREF="([^"]*)">')
    self.re_bookmark = re.compile(r'<A NAME="([^"]*)">')
    self.clean_html_files()
    # Create CSS file
    if (CUSTOM_CSS) :
      self.create_css()
    # Create about file
    self.create_about()

  def get_html_compiler_path(self):
    try:
      hkey = win32api.RegOpenKey(win32con.HKEY_CURRENT_USER, HTML_HELP_WSHOP_KEY)
      data, key_type = win32api.RegQueryValueEx(hkey, "InstallDir")
      win32api.RegCloseKey(hkey)
    except pywintypes.error, msg:
      fatal("HTML Help Workshop does not seem to be installed", msg[2])
      info("From http://www.burgaud.com/jd2chm_res.html, you will find the link to download the latest version of Microsoft HTML Help Compiler")
      #os.system('start hh mk:@MSITStore:%s\\dialogs.chm::/compiler.htm' % sys.path[0])
      sys.exit(3)

    path = os.path.join(data, 'hhc.exe')
    debug(path)
    if not os.path.exists(path):
      fatal("HTML Help Workshop has a valid key in the registry, but the compiler %s is not found. You may have to reinstall HTML Help Workshop" % path)
      #os.system('start hh mk:@MSITStore:%s\\dialogs.chm::/compiler.htm' % sys.path[0])
      sys.exit(3)
    return path

  def make(self):
    # Call the compiler
    compiler = win32api.GetShortPathName(self.html_compiler)
    info('HTML Help Compilation (Microsoft HTML Help compiler)')
    os.system('%s %s.hhp' % (compiler, self.project_name))

    # Copy the generated files in the starting dir
    #for file in glob.glob("%s.hh?" % project_name):
    #  print "Copy:", file
    #  shutil.copyfile(file, os.path.join(start_dir, file))

    # Copy back the compiled chm file (if any)
    chm = '%s.chm' % self.project_name
    if os.path.isfile(chm):
      shutil.copyfile(chm, os.path.join(self.start_dir, chm))
    else:
      error("No compiled HTML file generated")

    # Come back to the starting directory
    # Could be needed to start the chm for example
    os.chdir(self.start_dir)

  def delete_work_dir(self, dir):
    if os.path.isdir(dir):
      shutil.rmtree(dir)

  def copy_javadoc(self):
    """Copy the current tree into the temporary working directory"""
    tmp_dir = tempfile.gettempdir()
    tmp_dir = os.path.join(tmp_dir, WORKING_DIR)
    if os.path.isdir(tmp_dir):
      info("Deleting old directory", tmp_dir)
      shutil.rmtree(tmp_dir)
    info("Copying Javadoc files to", tmp_dir)
    shutil.copytree('.', tmp_dir)
    return tmp_dir

  def clean_html_files(self):
    # Assume current directory
    #list_file = []
    arg = None
    os.path.walk('.', self.clean_html, arg)

  def clean_html(self, arg, dirname, names):
    del arg # We don't use it. Elminate warning in PyChecker
    for html_file in names:
      if os.path.splitext(html_file)[1] == ".html":
        lines_modified = 0
        new_lines = []
        html_dir = os.path.abspath(dirname)
        path = os.path.join(html_dir, html_file)
        fd = open(path, "r")
        lines = fd.readlines()
        fd.close()
        for line in lines:
          # Check link method
          new_line = self.quote_url(self.re_method, line)
          if new_line:
            line = new_line
            lines_modified += 1
            new_lines.append(line)
            # Should not have the link and anchor on the same line
            continue
          # Check bookmark method
          new_line = self.quote_url(self.re_bookmark, line)
          if new_line:
            line = new_line
            lines_modified += 1
          new_lines.append(line)
        if lines_modified:
          info(html_file, lines_modified, "lines modified")
          fd = open(path, "w")
          fd.writelines(new_lines)
          fd.close()

  def quote_url(self, regex, line):
    match = regex.search(line)
    new_line = None
    # The line can be a method line (link or anchor)
    if match:
      method = match.group(1)
      # if the last char is ')', it is a method (not a field)
      # if if has a space, need to be modified
      if method[-1] == ')' and method.find(' ') != -1:
        href = urllib.quote(method, safe='()/,#')
        new_line = line.replace(method, href)
    return new_line

  def create_css(self):

    """Creates a custom CSS file (stylesheet.css) generated by the Javadoc and
    saves the original Javadoc css file (stylesheet.css) unless already saved.
    """

    css_file_bak = css_file_name + ".bak"
    if os.path.exists(css_file_name) :
      if not os.path.exists(css_file_bak) :
        info("Saves the original Javadoc css file (%s) as %s" % (css_file_name, css_file_bak))
        shutil.copyfile (css_file_name, css_file_name + ".bak")
    css_file = openfile_w(css_file_name)
    css_file.write(format_css)
    css_file.close()

  def create_about(self):
    """Creates an HTML about file to be included in the project."""
    about_file = openfile_w(ABOUT_FILE)
    about_file.write(ABOUT_TEXT)
    about_file.close()

#===============================================================================
# HELPERS
#===============================================================================

# TODO: Replace walktree by os.path.walk or better
# by os.walk available in Python 2.3
def walktree(dir, callback):

  """Recursively descends the directory rooted at dir, calling the callback
  function for each HTML file
  """

  #debug("[walktree] Directory: %s" % dir)
  sys.stdout.write('.')
  if (dir == './' + index_dir) :
    print # Carriage return after the dots...
    debug("Skipping %s" % dir)
    return
  for f in os.listdir(dir):
    pathname ='%s/%s' % (dir, f)
    if os.path.isdir(pathname):
      walktree(pathname, callback)
    elif os.path.isfile(pathname):
      callback(pathname) # Writes the line in the project file section
    else :
      print # Carriage return after the dots...
      debug("Skipping %s" % pathname)

def openfile_w(file):
  """opens file with write attribute."""
  try :
    fd = open(file, "w")
  except IOError, msg :
    fatal("Exception while opening %s: %s" % (file, msg))
    sys.exit(2)
  return fd

def openfile_r(file):
  """Opens file with read attribute."""
  try :
    fd = open(file, "r")
  except IOError, msg :
    fatal("Exception while opening %s: %s" % (file, msg))
    sys.exit(2)
  return fd

def usage():
  print __doc__

def mit_license():
  print MIT_LICENSE

def check_compiler():
  env = ChmEnv()
  hhc = env.get_html_compiler_path()
  info("HTML Help Compiler installed and found: %s" % hhc)

def print_dot(cpt):
  """Print dots '.' to show activity in progress"""
  cpt += 1
  if (cpt > 100):
    sys.stdout.write('.')
    cpt = 0
  return cpt

#===============================================================================
# log methods. Mimics logging such as log4j
# Did not use the logging module from 2.3 to try to stay
# compatible with Python 2.2
# (Compatibility with Jython broken with the win32api usage).
def debug(*args):
  log(LEVEL_DEBUG, args)

def info(*args):
  log(LEVEL_INFO, args)

def warn(*args):
  log(LEVEL_WARN, args)

def error(*args):
  log(LEVEL_ERROR, args)

def fatal(*args):
  log(LEVEL_FATAL, args)

def log(level, args):
  if level >= LEVEL_LOG:
    print "[%s] %s\t" % (time.strftime("%m-%d-%Y %H:%M:%S"), levels[level]),
    for text in args:
      print text,
    print

#===============================================================================
# Main
def main() :
  #print message_version % VERSION
  # Arguments processing
  try:
    opts, args = getopt.getopt(sys.argv[1:], "hclp:t:")
  except getopt.GetoptError:
    usage()
    sys.exit(2)

  project_name = None
  project_title = None

  # Check if we are in a Javadoc directory
  if not os.path.exists('index.html'):
    print 'No index.html found in the current directory (%s)' % os.getcwd()
    print 'Run jd2chm from a directory that contains a generated Javadoc documentation.'
    sys.exit()

  if len(opts) == 0 :
    print MSG_WELCOME % __version__

    print "The project name will be given to:"
    print "- The HTML Help project files (.HHP, .HHK, .HHC)"
    print "- To the final CHM file"
    try:
      project_name = raw_input("Enter the project name: ")
      print "The project title will be assign to the CHM window"
      project_title = raw_input("Enter the project title: ")
    except KeyboardInterrupt:
      print
      print 'Bye!'
      sys.exit()

  for o, a in opts :
    if o == "-h":
      usage()
      sys.exit()
    if o == "-c":
      check_compiler()
      sys.exit()
    if o == "-l":
      mit_license()
      sys.exit()
    if o == "-p":
      project_name = a
    if o == "-t":
      project_title = a

  if not project_name :
    error("Error: Missing project name (option -p)")
    usage()
    sys.exit(1)

  if not project_title :
    error("Error: Missing project title (option -t)")
    usage()
    sys.exit(1)

  # End arguments processing
  info("Starts building the project")
  info("Project: %s" % project_name)
  info("Title: %s" % project_title)

  # Prepare Environment
  env = ChmEnv()
  env.prepare_env(project_name)

  # Create HTML help files
  project = CChmProject()
  project.create_project(project_name, project_title)

  # Generate the CHM and clean-up
  env.make()

  # End
  info('Compilation completed')
  print MSG_THANKS

#===============================================================================
# MAIN
#===============================================================================
if __name__ == '__main__':
  main()